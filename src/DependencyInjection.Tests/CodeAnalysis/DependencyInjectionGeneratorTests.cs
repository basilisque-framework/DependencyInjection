using Basilisque.CodeAnalysis.TestSupport.MSTest.SourceGenerators.UnitTests.Verifiers;
using Basilisque.DependencyInjection.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Text;

namespace Basilisque.DependencyInjection.Tests.CodeAnalysis
{
    [TestClass]
    public class DependencyInjectionGeneratorTests
    {
        [TestMethod]
        public async Task MyTestMethod()
        {
            var code = @"
        /// <summary>
        /// Test class for Alex
        /// </summary>
        /// <returns></returns>
        public class AlexTestClass
        {
        }
        ";

            //var refAssemblies = new Microsoft.CodeAnalysis.Testing.ReferenceAssemblies("net6.0", new("Microsoft.NETCore.App.Ref", "6.0.0"), @"ref\net6.0")
            //    .WithPackages(System.Collections.Immutable.ImmutableArray.Create(new Microsoft.CodeAnalysis.Testing.PackageIdentity("Microsoft.AspNetCore.App.Ref", "6.0.0")));

            var refAssemblies = Microsoft.CodeAnalysis.Testing.ReferenceAssemblies.Net.Net60
                .WithPackages(System.Collections.Immutable.ImmutableArray.Create(new Microsoft.CodeAnalysis.Testing.PackageIdentity("Microsoft.AspNetCore.App.Ref", "6.0.0")));


            var verifier = new IncrementalSourceGeneratorVerifier<DependencyInjectionGenerator>
            {
                ReferenceAssemblies = refAssemblies,
                GlobalOptions =
                {
                    { "build_property.RootNamespace", "Alex.Test.RNS" }
                },
                DiagnosticOptions =
                {
                    //{ "CS1591", Microsoft.CodeAnalysis.ReportDiagnostic.Suppress }
                },
                TestState =
                {
                    //AnalyzerConfigFiles = { },
                    Sources = { code }
                }
            };

            verifier.TestState.AdditionalReferences.Add(Microsoft.CodeAnalysis.MetadataReference.CreateFromFile(typeof(Registration.IDependencyRegistrator).Assembly.Location));

            var expectedSources = getExpectedSources();
            foreach (var expectedSource in expectedSources)
            {
                verifier.TestState.GeneratedSources.Add((typeof(DependencyInjectionGenerator), expectedSource.Name, SourceText.From(expectedSource.SourceText, Encoding.UTF8)));
            }

            await verifier.RunAsync();
        }

        private List<(string Name, string SourceText)> getExpectedSources()
        {
            var result = new List<(string, string)>();

            result.Add(getAssemblyNamespaceImplSrc());
            result.Add(getRootNamespaceStubSrc());
            result.Add(getServiceCollectionExtensionsSrc());
            result.Add(getRootNamespaceImplSrc());

            return result;
        }

        private (string, string) getAssemblyNamespaceImplSrc()
        {
            var src = @"//------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//   Basilisque.DependencyInjection.CodeAnalysis, 1.0.0.0
//   
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------

namespace TestProject
{
    /// <summary>
    /// Registers all dependencies and services of this assembly.
    /// This class mainly exists for performance and simplicity reasons during code compilation.
    /// Although there is technically no reason to not manually interact with this class, you should probably prefer to use the identical class in your root namespace (<see cref=""Alex.Test.RNS.DependencyRegistrator""/>).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Basilisque.DependencyInjection.CodeAnalysis"", ""1.0.0.0"")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public sealed class DependencyRegistrator : Alex.Test.RNS.DependencyRegistrator
    {
    }
}";

            return ("DependencyRegistrator_AssemblyNameNamespace.g.cs", src);
        }

        private (string, string) getRootNamespaceStubSrc()
        {
            var src = @"//------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//   Basilisque.DependencyInjection.CodeAnalysis, 1.0.0.0
//   
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------

using Basilisque.DependencyInjection.Registration;
using Microsoft.Extensions.DependencyInjection;

namespace Alex.Test.RNS
{
    /// <summary>
    /// Registers all dependencies and services of this assembly.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Basilisque.DependencyInjection.CodeAnalysis"", ""1.0.0.0"")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DependencyRegistrator : BaseDependencyRegistrator
    {
        /// <inheritdoc />
        protected override void PerformInitialization(DependencyCollection collection)
        {
            doBeforeInitialization(collection);
            
            initializeDependenciesGenerated(collection);
            
            doAfterInitialization(collection);
        }
        
        partial void doBeforeInitialization(DependencyCollection collection);
        
        partial void initializeDependenciesGenerated(DependencyCollection collection);
        
        partial void doAfterInitialization(DependencyCollection collection);
        
        /// <inheritdoc />
        protected override void PerformServiceRegistration(IServiceCollection services)
        {
            doBeforeRegistration(services);
            
            registerServicesGenerated(services);
            
            doAfterRegistration(services);
        }
        
        partial void doBeforeRegistration(IServiceCollection services);
        
        partial void registerServicesGenerated(IServiceCollection services);
        
        partial void doAfterRegistration(IServiceCollection services);
    }
}";

            return ("DependencyRegistrator_RootNamespace.g.cs", src);
        }

        private (string, string) getRootNamespaceImplSrc()
        {
            var src = @"using Basilisque.DependencyInjection.Registration;
using Microsoft.Extensions.DependencyInjection;

namespace Alex.Test.RNS
{
    public partial class DependencyRegistrator
    {
        partial void initializeDependenciesGenerated(DependencyCollection collection)
        {
            /* initialize dependencies - generated from assembly dependencies */
        }
        
        partial void registerServicesGenerated(Microsoft.Extensions.DependencyInjection.IServiceCollection services)
        {
            /* register services - generated from the current project */
        }
    }
}";

            return ("DependencyRegistrator_RootNamespace.impl.g.cs", src);
        }

        private (string, string) getServiceCollectionExtensionsSrc()
        {
            var src = @"//------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//   Basilisque.DependencyInjection.CodeAnalysis, 1.0.0.0
//   
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------

using Microsoft.Extensions.DependencyInjection;
using Basilisque.DependencyInjection.Registration;

namespace Alex.Test.RNS
{
    /// <summary>
    /// This class contains extension methods for <see cref=""IServiceCollection""/>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""Basilisque.DependencyInjection.CodeAnalysis"", ""1.0.0.0"")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public static class IServiceCollectionExtensions
    {
        /// <summary>
        /// This method extends <see cref=""IServiceCollection""/> with a mechanism to register dependencies and services for the whole application.
        /// Calling this method creates a <see cref=""DependencyRegistratorBuilder{TDependencyRegistrator}""/> and initializes the dependency chain.
        /// </summary>
        /// <param name=""services"">The <see cref=""IServiceCollection""/> all services are registered on.</param>
        /// <returns>A <see cref=""DependencyRegistratorBuilder{TDependencyRegistrator}""/> that is used to build and execute the chain of <see cref=""IDependencyRegistrator""/></returns>
        public static DependencyRegistratorBuilder<Alex.Test.RNS.DependencyRegistrator> InitializeDependencies(this IServiceCollection services)
        {
            return Basilisque.DependencyInjection.IServiceCollectionExtensions.InitializeDependencies<Alex.Test.RNS.DependencyRegistrator>(services);
        }
        
        /// <summary>
        /// This method extends <see cref=""IServiceCollection""/> with a mechanism to register dependencies and services for the whole application.
        /// Calling this method creates a <see cref=""DependencyRegistratorBuilder{TDependencyRegistrator}""/>, initializes the dependency chain and executes the registration of all services.
        /// For more control over the details of this process use <see cref=""InitializeDependencies""/> instead.
        /// </summary>
        /// <param name=""services"">The <see cref=""IServiceCollection""/> all services are registered on.</param>
        public static void RegisterServices(this IServiceCollection services)
        {
            Basilisque.DependencyInjection.IServiceCollectionExtensions.InitializeDependencies<Alex.Test.RNS.DependencyRegistrator>(services).RegisterServices();
        }
    }
}";

            return ("IServiceCollectionExtensions.g.cs", src);
        }
    }
}
